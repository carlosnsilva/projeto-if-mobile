-- ######################################################## --
--					 FUNCOES DE SUPORTE					    --
-- ######################################################## --

-- recebe uma data e retorna a data com o ultimo dia do mes dessa data.
CREATE OR REPLACE FUNCTION ultimo_dia(date)
RETURNS date AS
$$
  SELECT (date_trunc('MONTH', $1) + INTERVAL '1 MONTH - 1 day')::date;
$$ LANGUAGE 'sql' IMMUTABLE STRICT;



-- recebe dois chips e retorna true caso os dois pertencam a mesma operadora
-- e false caso contrario.
CREATE OR REPLACE FUNCTION mesma_operadora(chip_1 VARCHAR(11), chip_2 VARCHAR(11))
RETURNS BOOLEAN
AS $$
DECLARE
	operadora_1 INT;
	operadora_2 INT;
BEGIN
	-- operadora do primeiro chip
	SELECT idoperadora INTO operadora_1
	FROM CHIP WHERE idnumero = chip_1;

	-- operadora do segundo chip
	SELECT idoperadora INTO operadora_2
	FROM CHIP WHERE idnumero = chip_2;
	
	IF operadora_1 = operadora_2 THEN
		RETURN true;
	ELSE
		RETURN false;
	END IF;
END $$ 
LANGUAGE plpgsql;



-- retorna um numero inteiro para cada minuto de uma variavel time
CREATE OR REPLACE FUNCTION val_ToMin(valor NUMERIC)
RETURNS TIME
AS $$
DECLARE
	minutos TIME = '00:00:00';
	inteiro INT;
	segundos TIME;
BEGIN
	inteiro := FLOOR(valor);
	segundos := '00:00:' || CAST ((((valor - FLOOR(valor))*6)*10) AS INT);
	
	-- minutos
	FOR i IN 1..inteiro BY 1
	LOOP
		minutos := minutos + '00:01:00';
	END LOOP;
	
	minutos = minutos::interval + segundos::interval;
	RETURN minutos;
END $$ 
LANGUAGE plpgsql;



-- recebe uma taxa e uma duracao em formato de tempo retorna o custo dessa
-- duracao multiplicado pela taxa para cada minuto na duracao
CREATE OR REPLACE FUNCTION minTo_Val(taxaPorMin NUMERIC, duracao TIME, count_seg BOOLEAN)
RETURNS NUMERIC
AS $$
DECLARE
	contador INT = 0;
	horas INT;
	minutos INT;
	segundos INT;
BEGIN
	SELECT INTO segundos CAST((EXTRACT (SECOND FROM duracao)) AS INT);
	SELECT INTO minutos CAST((EXTRACT (MINUTE FROM duracao)) AS INT);
	SELECT INTO horas CAST((EXTRACT (HOUR FROM duracao)) AS INT);
	
	-- de segundos para o contador
	IF (segundos >= 30) AND (count_seg = true) THEN 
		contador := contador + 1;
	END IF;
	-- minutos para o contador
	contador := contador + minutos;
	
	-- de horas para o contador
	contador := contador + (horas * 60);
	RETURN contador * taxaPorMin;
END $$ 
LANGUAGE plpgsql;



-- retorna um record com os dados do plano de um numero 
CREATE OR REPLACE FUNCTION get_plano(numero VARCHAR(11))
RETURNS RECORD
AS $$
DECLARE
	plano RECORD;
BEGIN
	SELECT pla.idplano, pla.fminin, pla.fminout, pla.valor, ch1.idnumero 
	INTO plano FROM plano pla INNER JOIN chip ch1 ON ch1.idplano = pla.idplano	
	WHERE pla.idplano = (
		SELECT idplano FROM chip ch
		WHERE ch.idnumero = numero
		LIMIT 1
	);
	RETURN plano;
END $$ 
LANGUAGE plpgsql;



-- ######################################################## --
--						 REQUISITOS						    --
-- ######################################################## --



-- REQUISITO 1
CREATE OR REPLACE FUNCTION gerar_numero(operadora INT, estado VARCHAR(2))
RETURNS VARCHAR
AS $$
	DECLARE 
		ddd VARCHAR(2);
		prefixo VARCHAR(4);
		complemento VARCHAR;
		numero VARCHAR(11);
	BEGIN
		-- Definicao do ddd
		SELECT es.ddd INTO ddd FROM estado es WHERE es.uf = estado;
		IF ddd IS null THEN		
			RETURN 'Estado nao encontrado.';
		END IF;
		
		-- loop de tentativas para gerar o chip
		WHILE true
		LOOP
			-- Definicao do prefixo 985 + (1 ou 2)
			prefixo := '985' || (CAST ((FLOOR(random()*(2-1+1))+1) AS VARCHAR));

			-- Formacao do corpo do numero
			complemento := (CAST ((FLOOR(random()*(9-1+1))+1) AS VARCHAR));

			WHILE true
			LOOP
				complemento := (CAST ((FLOOR(random()*(9-1+1))+1) AS VARCHAR));
				FOR i IN 1..3 BY 1
				LOOP
					complemento := complemento || (CAST ((FLOOR(random()*(9-1+1))+1) AS VARCHAR));
				END LOOP; -- for

				IF complemento != '0000' THEN
					EXIT;
				END IF;
				complemento := (CAST ((FLOOR(random()*(9-1+1))+1) AS VARCHAR)) || complemento;
			END LOOP;
			
			-- numero completo
			numero := ddd || prefixo || complemento;
			
			-- verificacao se o numero existe no banco
			IF NOT EXISTS (SELECT idnumero FROM chip WHERE idnumero = numero) THEN
				EXIT;
			END IF;
		END LOOP;
		RETURN numero;
	END
$$
LANGUAGE 'plpgsql';



-- REQUISITO 2
CREATE OR REPLACE FUNCTION numeros_disponiveis()
RETURNS TABLE (numero CHAR(11))
AS $$
	BEGIN
		RETURN QUERY 
		SELECT IDNUMERO FROM CHIP 
		WHERE DISPONIVEL = 'S' 
		ORDER BY RANDOM() LIMIT 5;
	END
$$
LANGUAGE 'plpgsql';



-- REQUISITO 3

CREATE OR REPLACE PROCEDURE gerar_faturas(ano INT, mes INT)
LANGUAGE plpgsql
AS $$
DECLARE
	-- variaveis de controle
	chip RECORD;
	ligacao RECORD;
	datafatura DATE;
	datafinal DATE;
	pl RECORD;
	timeVar TIME;
	
	-- variaveis exclusivas da fatura
	taxa_roaming NUMERIC(5,2);
	taxa_Exced NUMERIC(5,2);
	minIn_dispo TIME;
	minIn_usado TIME;
	minOut_dispo TIME;
	minOut_usado TIME;
	exced NUMERIC(5,2);
	seg_acumulados TIME = '00:00:00';
	roaming NUMERIC(5,2);
	total NUMERIC(7,2);
	
BEGIN
	-- definicao das datas das faturas
	datafatura = ano || '-' || mes || '-01';
	
	-- definicao da data do ultimo dia do mes da fatura
	SELECT ultimo_dia(datafatura) INTO datafinal;
	
	-- loop por todos os chips que pertencem a clientes ativos
	FOR chip IN SELECT cc.idnumero, cc.idcliente 
	FROM cliente_chip cc 
	INNER JOIN cliente cl ON cl.idcliente = cc.idcliente 
	WHERE cl.cancelado = 'N'
	LOOP		
		-- exclusao de fatura ja existente para essa data caso exista
		DELETE FROM fatura WHERE referencia = datafatura 
		AND idnumero = chip.idnumero;
		
		-- busca pelo plano do chip
		pl := get_plano(chip.idnumero);

		-- reset das variaveis da fatura de acordo com o dados do plano
		minIn_dispo := val_ToMin(pl.fminin);
		minout_dispo := val_ToMin(pl.fminout);

		minIn_usado :=  '00:00:00';
		minOut_usado := '00:00:00';

		exced := 0;
		roaming := 0;
				
		SELECT taf.valor INTO taxa_roaming 
		FROM plano_tarifa plt INNER JOIN tarifa taf	ON taf.idtarifa = plt.idtarifa 
		WHERE plt.idplano = pl.idplano AND taf.descricao = 'Uso de roaming';

		SELECT taf.valor INTO taxa_Exced
		FROM plano_tarifa plt INNER JOIN tarifa taf ON taf.idtarifa = plt.idtarifa
		WHERE plt.idplano = pl.idplano AND taf.descricao = 'Exceder minutos do plano';

		total := pl.valor;

		-- loop por todas as ligacoes do chip feitas no periodo da fatura
		FOR ligacao IN SELECT * FROM ligacao li
		WHERE li.chip_emissor = chip.idnumero 
		AND (li.data >= datafatura AND li.data <= datafinal)
		LOOP
			-- verificacao se a ligacao foi feita para a mesma operadora
			IF mesma_operadora(ligacao.chip_emissor, ligacao.chip_receptor) THEN
				minIn_usado := minIn_usado::interval + ligacao.duracao::interval;
				IF ligacao.duracao <= minIn_dispo THEN
					minIn_dispo := minIn_dispo - ligacao.duracao;
				ELSE
					minIn_dispo := '00:00:00';
					timevar := ligacao.duracao - minIn_dispo;						
					exced := exced + minTo_Val(taxa_Exced, timeVar, false);
					seg_acumulados := seg_acumulados + ('00:00:' || (EXTRACT(SECOND FROM timeVar)))::interval;
				END IF;
			ELSE
				roaming := roaming + taxa_roaming;
				minOut_usado := minOut_usado::interval + ligacao.duracao::interval;
				IF ligacao.duracao <= minOut_dispo THEN
					minOut_dispo := minOut_dispo - ligacao.duracao;
				ELSE
					minOut_dispo := '00:00:00';						
					timevar := ligacao.duracao - minOut_dispo;
					exced := exced + minTo_Val(taxa_Exced, timeVar, false);
					seg_acumulados := seg_acumulados + ('00:00:' || (EXTRACT(SECOND FROM timeVar)))::interval;
				END IF;	
			END IF;
		END LOOP;
		
		-- contagem dos segundos acumulados por todas as ligacoes
		exced := exced +  minTo_Val(taxa_Exced, seg_acumulados, true);

		-- definicao do total da fatura
		total := total + exced + roaming;
	
		-- criacao da fatura para o chip
		INSERT INTO fatura(
			referencia,
			idnumero, 
			valor_plano, 
			tot_min_int, 
			tot_min_ext, 
			tx_min_exced, 
			tx_roaming, 
			total, 
			pago
		) 
		VALUES (
			datafatura, 
			chip.idnumero,
			pl.valor,
			minTo_Val(1, minIn_usado, true),
			minTo_Val(1, minOut_usado, true),
			exced, 
			roaming, 
			total, 
			'N'
		);		
	END LOOP;
	COMMIT;
END $$;



-- REQUISITO 4
CREATE OR REPLACE FUNCTION FN_PERMITE_LIGACAO()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
DECLARE
	INFO_CHIP RECORD;
BEGIN
	--BUSCA AS INFORMACOES DO CHIP DO RECEPTOR
	SELECT CHIP.DISPONIVEL, CHIP.ATIVO 
	INTO INFO_CHIP 
	FROM CHIP 
	WHERE CHIP.IDNUMERO = NEW.CHIP_RECEPTOR;
	
	--VERIFICA AS INFORMACOES DO CHIP SÃO VALIDAS
	IF INFO_CHIP.DISPONIVEL = 'N' AND INFO_CHIP.ATIVO = 'S' THEN
		RAISE NOTICE 'LIGACAO CADASTRADA COM SUCESSO';
		RETURN NULL;
	ELSE
		RAISE EXCEPTION 'CHIP DO DESTINATARIO INVALIDO, POR FAVOR ENTRAR EM CONTATO COM A OPERADORA';
	END IF;
END $$;

CREATE TRIGGER TG_PERMITE_LIGACAO
AFTER INSERT ON LIGACAO
FOR EACH ROW
EXECUTE PROCEDURE FN_PERMITE_LIGACAO();



-- REQUISITO 5
CREATE OR REPLACE FUNCTION FN_associar_num_cliente()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
BEGIN
	IF (SELECT cli.cancelado FROM cliente cli WHERE cli.idcliente = NEW.idcliente) = 'N' THEN
		RAISE NOTICE 'ASSOCIAÇÃO FEITA COM SUCESSO';
		RETURN NEW;
	ELSE
		RAISE EXCEPTION 'NÃO É POSSÍVEL ASSOCIAR O CHIP % A UM CLIENTE INATIVO', NEW.idnumero;
	END IF;
END $$;


CREATE TRIGGER TG_associar_num_cliente
AFTER INSERT ON cliente_chip
FOR EACH ROW
EXECUTE PROCEDURE FN_associar_num_cliente();


-- REQUISITO 6
CREATE OR REPLACE FUNCTION FN_DISPONIBILIZA_NUMERO_3()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
DECLARE
	CHIP_ASSOCIADO RECORD;
BEGIN
	IF NEW.CANCELADO = 'S' THEN
		FOR CHIP_ASSOCIADO IN 
		SELECT * FROM CLIENTE_CHIP CC
		WHERE CC.IDCLIENTE = NEW.IDCLIENTE
		LOOP
			-- DESFAZENDO RELAÇÃO ENTRE CLIENTE E CHIP
			DELETE FROM CLIENTE_CHIP CC 
			WHERE CC.IDNUMERO = CHIP_ASSOCIADO.IDNUMERO;		
			
			-- TROCANDO OS STATUS DO NUMERO
			UPDATE CHIP SET ATIVO = 'N', DISPONIVEL = 'S'
			WHERE IDNUMERO = CHIP_ASSOCIADO.IDNUMERO;
		END LOOP;
		RETURN NEW;
	ELSE
		RETURN NEW;
	END IF;	
END $$;

CREATE TRIGGER TG_DISPONIBILIZA_NUMBER_3
AFTER UPDATE OF CANCELADO ON CLIENTE
FOR EACH ROW
EXECUTE PROCEDURE FN_DISPONIBILIZA_NUMERO_3();

-- REQUISITO 7

-- PROCEDURE QUE POVOA LIGACOES EM UM MES E ANO ESPECIFICOS
CREATE OR REPLACE PROCEDURE gerar_ligacao(chip_rec VARCHAR, dia DATE, operadora_dest VARCHAR, n_ligacoes INT)
LANGUAGE plpgsql
AS $$
DECLARE
	--dados de controle
	num_minutos NUMERIC;
	chip_dest RECORD;
	ts_ini TIMESTAMP;
	ts_fim TIMESTAMP;
	ts_ultimaLig TIME;
	espacamento TIME;
	tipo INT;
	
	-- dados do insert
	data_lig TIMESTAMP;
	duracao TIME;
	uf_orig VARCHAR(2);
	uf_dest VARCHAR(2);
	
BEGIN
	-- definicao da duracao da ligacao
	tipo = FLOOR(random()*(100-1+1))+1;
	IF tipo <= 40 THEN
		-- ligacao de 30s a 10 min
		num_minutos = ROUND( CAST(FLOAT8 (random()*(10-0.5)+0.5) AS NUMERIC), 2);
	ELSIF tipo <= 85 THEN
		-- ligacao de 20min a 10 min
		num_minutos = ROUND( CAST(FLOAT8 (random()*(20-10)+10) AS NUMERIC), 2);
	ELSIF tipo <= 97 THEN
		-- ligacao de 20 min a 1h
		num_minutos = ROUND( CAST(FLOAT8 (random()*(60-20)+20) AS NUMERIC), 2);
	ELSE
		-- ligacao de 1h a 2h
		num_minutos = ROUND( CAST(FLOAT8 (random()*(120-60)+60) AS NUMERIC), 2);
	END IF;
	
	-- definicao do timestamp da primeira ligacao e ultima no dia
	SELECT li.data INTO ts_ini
	FROM ligacao li
	WHERE (
		li.data >= (dia || ' 00:00:00')::timestamp 
		AND li.data <= (dia || ' 23:59:59')::timestamp
	) 
	AND li.chip_emissor = chip_rec
	ORDER BY li.data DESC LIMIT 1;
	
	-- caso nao exista ligacao no dia o timestamp inicia as 0 horas
	IF ts_ini IS NULL THEN
		ts_ini := dia || ' 00:00:00';
	END IF;
		
	-- definicao da duracao da ligacao
	duracao := val_ToMin(num_minutos);

	ts_fim := ts_ini + duracao;	
	
	-- definicao do chip de destino
	IF operadora_dest = 'op_igual' THEN
		SELECT * INTO chip_dest FROM chip ch
		WHERE ch.idoperadora = (
			SELECT idoperadora FROM chip 
			WHERE idnumero = chip_rec
		) AND ch.idnumero != chip_rec
		AND ch.ativo = 'S'
		ORDER BY random() LIMIT 1;
	ELSE
		SELECT * INTO chip_dest FROM chip ch
		WHERE ch.idoperadora != (
			SELECT idoperadora FROM chip 
			WHERE idnumero = chip_rec
		) AND ch.ativo = 'S'
		ORDER BY random() LIMIT 1;
	END IF;
			
	-- definicao do espacamento entre as ligacoes
	espacamento := val_ToMin((random()*(((24/n_ligacoes)*10)-0.5)+0.5)::NUMERIC);
		
	-- extração da duracao da ultima ligacao do chip
	SELECT li.duracao INTO ts_ultimaLig 
	FROM ligacao li
	WHERE li.chip_emissor = chip_rec
	ORDER BY li.data DESC LIMIT 1;
	
	-- definicao da duracao da ultima ligacao
	IF ts_ultimaLig IS NULL THEN
		data_lig := ts_ini + espacamento;
	ELSE
		data_lig := ts_ini + espacamento + ts_ultimaLig;
	END IF;
	
	-- se a ligacao é em roaming ou nao 
	IF (FLOOR(random()*(10-1+1))+1) > 9 THEN
		SELECT es.uf INTO uf_orig FROM estado es 
		WHERE es.ddd != (SUBSTRING (chip_rec FROM 1 FOR 2))::INTEGER;
	ELSE
		SELECT es.uf INTO uf_orig FROM estado es 
		WHERE es.ddd = (SUBSTRING (chip_rec FROM 1 FOR 2))::INTEGER;
	END IF;
	
	-- definicao da uf de destino
	SELECT es.uf INTO uf_dest FROM estado es 
	WHERE es.ddd = (SUBSTRING (chip_dest.idnumero FROM 1 FOR 2))::INTEGER;
	
	INSERT INTO ligacao(
		data,
		chip_emissor,
		uforigem,
		chip_receptor,
		ufdestino,
		duracao
	) VALUES (
		data_lig,
		chip_rec,
		uf_orig,
		chip_dest.idnumero,
		uf_dest,
		duracao
	);
END $$;


-- PROCEDURE QUE POVOA LIGACOES EM UM MES E ANO ESPECIFICOS
CREATE OR REPLACE PROCEDURE povoar_ligacoes(ano INT, mes INT)
LANGUAGE plpgsql
AS $$
DECLARE
	data_ini DATE;
	data_fim DATE;
	data_lig DATE;
	count_dias INT;
	chip RECORD;
	num_liga INT = 0;	
	num_liga_out INT = 0;
	num_liga_in INT = 0;
	str_ini VARCHAR(7);
BEGIN
	IF mes < 10 THEN
		str_ini := ano ||'-0' || mes ;
	ELSE
		str_ini := ano ||'-' || mes ;
	END IF;
	data_ini := str_ini || '-01';	
	data_fim := ultimo_dia(data_ini);
	
	-- selecao de todos os chips pertinentes a clientes ativos em loop
	FOR chip IN SELECT cc.idnumero, cc.idcliente 
	FROM cliente_chip cc 
	INNER JOIN cliente cl ON cl.idcliente = cc.idcliente 
	WHERE cl.cancelado = 'N'
	LOOP
		count_dias = CAST((EXTRACT (DAY FROM data_fim)) AS INT);
		FOR i IN 1..count_dias BY 1
		LOOP
			raise notice '%', i;
			-- definicao da data da ligacao
			IF i < 10 THEN
				data_lig := str_ini || '-0' || i;
			ELSE
				data_lig := str_ini || '-' || i;			 	
			END IF;
			
			-- definicao do numero de ligacoes para cada operadora 
			num_liga = FLOOR(random()*(10-1+1))+1;
			num_liga_out = ROUND((num_liga * 3)/10); -- 30% para fora
			num_liga_in = ROUND((num_liga * 7)/10);  -- 70% para entre operadoras
			IF num_liga_in = 0 THEN
				num_liga_in = 1;
			END IF;
			
			FOR j IN 1..num_liga_out BY 1
			LOOP
				CALL gerar_ligacao(chip.idnumero, data_lig, 'op_igual', num_liga);
			END LOOP;
			
			FOR l IN 1..num_liga_in BY 1
			LOOP
				CALL gerar_ligacao(chip.idnumero, data_lig, 'op_diferente', num_liga);
			END LOOP;
		END LOOP;
	END LOOP;
END $$;


--REQUISITO 8

CREATE OR REPLACE FUNCTION FN_CANCELA_INATIVA_DEVEDOR()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
DECLARE
	INFO_TUDO RECORD;
BEGIN
	--BUSCA AS INFORMAÇÕES DO CLIENTE,CHIP
	SELECT CLIENTE.IDCLIENTE, CHIP.IDNUMERO,FATURA.PAGO INTO INFO_TUDO
	FROM CLIENTE JOIN CLIENTE_CHIP
	ON CLIENTE.IDNUMERO = CLIENTE_CHIP.IDNUMERO
	JOIN CHIP
	ON CLIENTE_CHIP.IDNUMERO = CHIP.IDNUMERO
	JOIN FATURA
	ON FATURA.IDNUMERO = CHIP.IDNUMERO
	WHERE CLIENTE.IDCLIENTE = OLD.IDCLIENTE;
	
	IF INFO_TUDO.PAGO = 'N' THEN
		UPDATE CHIP SET ATIVO = 'N'
		WHERE CHIP.IDNUMERO = INFO_TUDO.IDNUMERO;
		
		UPDATE CLIENTE SET CANCELADO = 'S'
		WHERE CLIENTE.IDCLIENTE = INFO_TUDO.IDCLIENTE;
		
		RETURN NULL;
	
	ELSE
		RAISE EXCEPTION 'O CLIENTE NÃO APRESENTA FATURAS EM ABERTO';
	END IF;
END $$;

CREATE TRIGGER TG_CANCELA_INATIVA_DEVEDOR
AFTER UPDATE OF PAGO ON FATURA
FOR EACH ROW
EXECUTE PROCEDURE FN_CANCELA_INATIVA_DEVEDOR();