-- REQUISITO 1

CREATE OR REPLACE FUNCTION gerar_numero(operadora INT, estado VARCHAR(2))
RETURNS VARCHAR
AS $$
	DECLARE 
		ddd VARCHAR(2);
		prefixo VARCHAR(4);
		complemento VARCHAR;
		numero VARCHAR(11);
		loopComplemento BOOLEAN = true;
		loopChip BOOLEAN = true;
		idpl INT;
		verificao VARCHAR(11);
	BEGIN
		-- Definicao do ddd
		SELECT es.ddd INTO ddd FROM estado es WHERE es.uf = estado;
		IF ddd IS null THEN		
			RETURN 'Estado nao encontrado.';
		END IF;
		
		-- loop de tentativas para gerar o chip
		WHILE loopChip = true
		LOOP
			-- Definicao do prefixo 985 + (1 ou 2)
			prefixo := '985' || (CAST ((FLOOR(random()*(2-1+1))+1) AS VARCHAR));

			-- Formacao do corpo do numero
			complemento := (CAST ((FLOOR(random()*(9-1+1))+1) AS VARCHAR));

			WHILE loopComplemento = true
			LOOP
				complemento := (CAST ((FLOOR(random()*(9-1+1))+1) AS VARCHAR));
				FOR i IN 1..3 BY 1
				LOOP
					complemento := complemento || (CAST ((FLOOR(random()*(9-1+1))+1) AS VARCHAR));
				END LOOP; -- for

				IF complemento != '0000' THEN
					loopComplemento := FALSE;
				END IF;
				complemento := (CAST ((FLOOR(random()*(9-1+1))+1) AS VARCHAR)) || complemento;
			END LOOP;
			
			-- numero completo
			numero := ddd || prefixo || complemento;
			
			-- verificacao se o numero existe no banco
			IF NOT EXISTS (SELECT idnumero FROM chip WHERE idnumero = numero) THEN
				EXIT;
			END IF;
		END LOOP;
		RETURN numero;
	END
$$
LANGUAGE 'plpgsql';



-- REQUISITO 2
-- função usada para retornar até 5 chips disponiveis ao cliente
CREATE OR REPLACE FUNCTION numeros_disponiveis()
RETURNS TABLE (numero CHAR(11))
AS $$
	BEGIN
		RETURN QUERY SELECT IDNUMERO FROM CHIP WHERE DISPONIVEL = 'S' ORDER BY RANDOM() LIMIT 5;
	END
$$
LANGUAGE 'plpgsql';




-- REQUISITO 3

-- FUNÇAO DE SUPORTE: recebe uma data e retorna a data do ultimo dia de um mes.
CREATE OR REPLACE FUNCTION ultimo_dia(date)
RETURNS date AS
$$
  SELECT (date_trunc('MONTH', $1) + INTERVAL '1 MONTH - 1 day')::date;
$$ LANGUAGE 'sql' IMMUTABLE STRICT;



-- FUNÇÃO DE SUPORTE: recebe dois chips e retorna true caso os dois pertencam
-- a mesma operadora e false caso contrario ou em caso de erro
CREATE OR REPLACE FUNCTION mesma_operadora(chip_1 VARCHAR(11), chip_2 VARCHAR(11))
RETURNS BOOLEAN
AS $$
DECLARE
	operadora_1 INT;
	operadora_2 INT;
BEGIN
	-- operadora do primeiro chip
	SELECT idoperadora INTO operadora_1
	FROM CHIP WHERE idnumero = chip_1;

	-- operadora do segundo chip
	SELECT idoperadora INTO operadora_2
	FROM CHIP WHERE idnumero = chip_2;
	
	IF operadora_1 = operadora_2 THEN
		RETURN true;
	ELSE
		RETURN false;
	END IF;
END $$ 
LANGUAGE plpgsql;



-- FUNCAO DE SUPORTE: retorna um numero inteiro para cada minuto
-- de uma variavel time
CREATE OR REPLACE FUNCTION int_ToMin(inteiro INT)
RETURNS TIME
AS $$
DECLARE
	minutos TIME = '00:00:00';
BEGIN
	FOR i IN 1..inteiro BY 1
	LOOP
		minutos := minutos + '00:01:00';
	END LOOP;
	RETURN minutos;
END $$ 
LANGUAGE plpgsql;



-- FUNCAO DE SUPORTE: recebe uma taxa e uma duracao em formato de tempo
-- retorna o custo dessa duracao multiplicado pela taxa
CREATE OR REPLACE FUNCTION minTo_Val(taxaPorMin NUMERIC, duracao TIME)
RETURNS NUMERIC
AS $$
DECLARE
	contador INT = 0;
	horas INT;
	minutos INT;
	segundos INT;
BEGIN
	SELECT INTO segundos CAST((EXTRACT (SECOND FROM duracao)) AS INT);
	SELECT INTO minutos CAST((EXTRACT (MINUTE FROM duracao)) AS INT);
	SELECT INTO horas CAST((EXTRACT (HOUR FROM duracao)) AS INT);
	
	-- de segundos para o contador
	IF segundos >= 30 THEN 
		contador := contador + 1;
	END IF;
	-- minutos para o contador
	contador := contador + minutos;
	
	-- de horas para o contador
	contador := contador + (horas * 60);
	RETURN contador * taxaPorMin;
END $$ 
LANGUAGE plpgsql;



-- FUNCAO DE SUPORTE: retorna um record com os dados do plano
-- de um numero 
CREATE OR REPLACE FUNCTION get_plano(numero VARCHAR(11))
RETURNS RECORD
AS $$
DECLARE
	plano RECORD;
BEGIN
	SELECT pla.fminin, pla.fminout, pla.valor, ch1.idnumero 
	INTO plano FROM plano pla INNER JOIN chip ch1 ON ch1.idplano = pla.idplano	
	WHERE pla.idplano = (
		SELECT idplano FROM chip ch
		WHERE ch.idnumero = numero
		LIMIT 1
	);
	RETURN plano;
END $$ 
LANGUAGE plpgsql;



-- PROCEDURE QUE GERA FATURAS
CREATE OR REPLACE PROCEDURE gerar_faturas(ano INT, mes INT)
LANGUAGE plpgsql
AS $$
DECLARE
	-- variaveis de controle
	chip RECORD;
	ligacao RECORD;
	datafatura DATE;
	datafinal DATE;
	pl RECORD;
	mesma_op BOOLEAN;
	timeVar TIME;
	mes_anterior DATE;
	anterior_pago CHAR(1);
	anterior_val NUMERIC(7,2);
	
	-- variaveis exclusivas da fatura
	taxa_roaming NUMERIC(5,2);
	taxa_Exced NUMERIC(5,2);
	minIn_dispo TIME;
	minIn_usado TIME;
	minOut_dispo TIME;
	minOut_usado TIME;
	exced NUMERIC(5,2);
	roaming NUMERIC(5,2);
	total NUMERIC(7,2);
	
BEGIN
	-- definicao das datas das faturas
	datafatura = ano || '-' || mes || '-01';
	mes_anterior = date_trunc('month', datafatura - interval '1' month);
	
	-- definicao da data do ultimo dia do mes da fatura
	SELECT ultimo_dia(datafatura) INTO datafinal;
	
	-- loop por todos os chips que pertencem a clientes ativos
	FOR chip IN SELECT cc.idnumero, cc.idcliente 
	FROM cliente_chip cc 
	INNER JOIN cliente cl ON cl.idcliente = cc.idcliente 
	WHERE cl.cancelado = 'N'
	LOOP		
		-- exclusao de fatura ja existente para essa data caso exista
		DELETE FROM fatura WHERE referencia = datafatura 
		AND idnumero = chip.idnumero;
		
		-- busca pelo plano do chip
		pl := get_plano(chip.idnumero);

		-- adicao dos dados do plano nas variaveis da fatura
		SELECT int_ToMin(pl.fminin) INTO minIn_dispo;

		SELECT int_toMin(pl.fminout) INTO minout_dispo;

		minIn_usado :=  '00:00:00';
		minOut_usado := '00:00:00';

		exced := 0;
		roaming := 0;
		
		SELECT taf.valor INTO taxa_roaming 
		FROM plano_tarifa plt INNER JOIN tarifa taf	ON taf.idtarifa = plt.idtarifa 
		WHERE plt.idplano = 1 AND taf.descricao = 'Uso de roaming';

		SELECT taf.valor INTO taxa_Exced
		FROM plano_tarifa plt INNER JOIN tarifa taf ON taf.idtarifa = plt.idtarifa
		WHERE plt.idplano = 1 AND taf.descricao = 'Exceder minutos do plano';

		total := pl.valor;

		-- loop por todas as ligacoes do chip feitas no periodo da fatura
		FOR ligacao IN SELECT * FROM ligacao li
		WHERE li.chip_emissor = chip.idnumero 
		AND (li.data >= datafatura AND li.data <= datafinal)
		LOOP
			-- verificacao se a ligacao foi feita para a mesma operadora
			SELECT mesma_operadora(ligacao.chip_emissor, ligacao.chip_receptor) INTO mesma_op;
			IF mesma_op THEN
				minIn_usado := minIn_usado::interval + ligacao.duracao::interval;
				IF ligacao.duracao <= minIn_dispo THEN
					minIn_dispo := minIn_dispo - ligacao.duracao;
				ELSE
					minIn_dispo := '00:00:00';
					timevar := ligacao.duracao - minIn_dispo;						
					exced := exced + minTo_Val(taxa_Exced, timeVar);
				END IF;
			ELSE
				roaming := roaming + taxa_roaming;
				minOut_usado := minOut_usado::interval + ligacao.duracao::interval;
				IF ligacao.duracao <= minOut_dispo THEN
					minOut_dispo := minOut_dispo - ligacao.duracao;
				ELSE
					minOut_dispo := '00:00:00';						
					timevar := ligacao.duracao - minOut_dispo;
					exced := exced + minTo_Val(taxa_Exced, timeVar);
				END IF;	
			END IF;
		END LOOP;

		-- adicao dos resultados no total da fatura			
		total := total + roaming + exced;

		-- soma do valor total com o valor da fatura anterior caso a mesma 
		-- nao tenha sido paga
		
		-- inativar o chip em vez de tornar a fatura paga
		
		SELECT fat.pago, fat.total FROM fatura fat
		WHERE referencia = mes_anterior
		AND idnumero = chip.idnumero
		INTO anterior_pago, anterior_val;

		IF anterior_pago = 'N' THEN
			-- adicao do valor da fatura anterior a atual
			total := total + anterior_val;
			
			-- definicao da fatura anterior como paga;
			UPDATE fatura SET pago = 'S' 
			WHERE referencia = mes_anterior
			AND idnumero = chip.idnumero;
		END IF;
		
		-- criacao da fatura para o chip
		INSERT INTO fatura(
			referencia,
			idnumero, 
			valor_plano, 
			tot_min_int, 
			tot_min_ext, 
			tx_min_exced, 
			tx_roaming, total, 
			pago
		) 
		VALUES (
			datafatura, 
			chip.idnumero,
			pl.valor,
			minTo_Val(1, minIn_usado),
			minTo_Val(1, minOut_usado),
			exced, 
			roaming, 
			total, 
			'N'
		);
		
	END LOOP;
	COMMIT;
END $$;



-- REQUISITO 4

CREATE OR REPLACE FUNCTION FN_PERMITE_LIGACAO()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
DECLARE
	INFO_CHIP RECORD;
BEGIN
	--BUSCA AS INFORMACOES DO CHIP DO RECEPTOR
	SELECT CHIP.DISPONIVEL, CHIP.ATIVO INTO INFO_CHIP FROM CHIP WHERE CHIP.IDNUMERO = NEW.CHIP_RECEPTOR;
	
	--VERIFICA AS INFORMACOES DO CHIP SÃO VALIDAS
	IF INFO_CHIP.DISPONIVEL = 'N' AND INFO_CHIP.ATIVO = 'S' THEN
		RAISE NOTICE 'LIGACAO CADASTRADA COM SUCESSO';
		RETURN NULL;
	ELSE
		RAISE EXCEPTION 'CHIP DO DESTINATARIO INVALIDO, POR FAVOR ENTRAR EM CONTATO COM A OPERADORA';
	END IF;
END $$;

CREATE TRIGGER TG_PERMITE_LIGACAO
AFTER INSERT ON LIGACAO
FOR EACH ROW
EXECUTE PROCEDURE FN_PERMITE_LIGACAO()


-- REQUISITO 5

CREATE OR REPLACE PROCEDURE PR_ASSOC_NUMERO_CLIENTE(ID_CLIENTE INTEGER, DDD VARCHAR, PREFIXO VARCHAR)
LANGUAGE PLPGSQL
AS $$
DECLARE
	IS_CANCELADO VARCHAR;
	NUMERO VARCHAR;
	OPERADORA_CLIENTE INTEGER;
	PLANO_CLIENTE INTEGER;
BEGIN
	SELECT CLIENTE.CANCELADO INTO IS_CANCELADO FROM CLIENTE WHERE CLIENTE.IDCLIENTE = ID_CLIENTE;
	IF IS_CANCELADO = 'N' THEN
		-- GERANDO O NUMERO TELEFONICO E PEGANDO UM PLANO,OPERADORA PARA SER INSERIDO
		SELECT FN_GERA_NUMERO_TELEFONE(DDD, PREFIXO) INTO NUMERO;
		SELECT * INTO PLANO_CLIENTE FROM (SELECT IDPLANO FROM PLANO ORDER BY RANDOM() LIMIT 1) AS "PLANO";
		SELECT * INTO OPERADORA_CLIENTE FROM(SELECT IDOPERADORA FROM OPERADORA ORDER BY RANDOM() LIMIT 1) AS "OPERADORA_CLIENTE";
		--INSERINDO NA TABELA CHIP
		INSERT INTO CHIP(IDNUMERO, IDOPERADORA, DISPONIVEL, IDPLANO, ATIVO)
		VALUES(NUMERO, OPERADORA_CLIENTE, PLANO_CLIENTE, 'N','S');
		COMMIT;
		--INSERINDO NA TABELA CLIENTE_CHIP
		INSERT INTO CLIENTE_CHIP(IDNUMERO, IDCLIENTE)
		VALUES(NUMERO,IDCLIENTE);
		COMMIT;
	ELSE
		RAISE EXCEPTION 'O CLIENTE APRESENTA O STATUS CANCELADO';
	END IF;
END $$;


-- REQUISITO 6

CREATE OR REPLACE FUNCTION FN_DISPONIBILIZA_NUMERO_3()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
DECLARE
	STATUS VARCHAR;
	INFO_CLIENTE RECORD;
BEGIN
	SELECT CANCELADO INTO STATUS FROM CLIENTE WHERE IDCLIENTE = OLD.IDCLIENTE;
	SELECT CLIENTE.IDCLIENTE,CHIP.IDNUMERO INTO INFO_CLIENTE FROM CLIENTE JOIN CLIENTE_CHIP ON CLIENTE.IDCLIENTE = CLIENTE_CHIP.IDCLIENTE JOIN CHIP ON CLIENTE_CHIP.IDNUMERO = CHIP.IDNUMERO WHERE CLIENTE.IDCLIENTE = OLD.IDCLIENTE;
	-- VERIFICA O STATUS DO CLIENTE
	
	IF STATUS = 'S' THEN
		-- TROCANDO OS STATUS DO NUMERO
		UPDATE CHIP SET ATIVO = 'N', DISPONIVEL = 'S'
		WHERE IDNUMERO = INFO_CLIENTE.IDNUMERO;
		
		-- DESFAZENDO RELAÇÃO ENTRE CLIENTE->CHIP
		DELETE FROM CLIENTE_CHIP
		WHERE CLIENTE_CHIP.IDNUMERO = INFO_CLIENTE.IDNUMERO AND CLIENTE_CHIP.IDCLIENTE = INFO_CLIENTE.IDCLIENTE;
		
		RETURN NULL;
	
	ELSE
		RAISE EXCEPTION'O CLIENTE ESTA ATIVO NA BASE DE DADOS';
	END IF;
END $$;

CREATE TRIGGER TG_DISPONIBILIZA_NUMBER_3
AFTER UPDATE OF CANCELADO ON CLIENTE
FOR EACH ROW
EXECUTE PROCEDURE FN_DISPONIBILIZA_NUMERO_3()

-- REQUISITO 7

-- PROCEDURE QUE POVOA LIGACOES EM UM MES E ANO ESPECIFICOS
CREATE OR REPLACE PROCEDURE gerar_ligacao(chip VARCHAR, dia DATE, operadora_dest VARCHAR)
LANGUAGE plpgsql
AS $$
DECLARE
	num_minutos NUMERIC;
	duracao TIME;
	tipo INT;
BEGIN
	-- definicao da duracao da ligacao
	tipo = FLOOR(random()*(10-1+1))+1;
	IF tipo <= 6 THEN
		-- ligacao de 30s a 20 min
		num_minutos = ROUND( CAST(FLOAT8 (random()*(20-0.5)+0.5) AS NUMERIC), 2);
	ELSIF tipo <= 9 THEN
		-- ligacao de 20 min a 1h
		num_minutos = ROUND( CAST(FLOAT8 (random()*(60-20)+20) AS NUMERIC), 2);
	ELSE
		-- ligacao de 1h a 2h
		num_minutos = ROUND( CAST(FLOAT8 (random()*(120-60)+60) AS NUMERIC), 2);
	END IF;
		
	
	
	RAISE NOTICE '% %', tipo, num_minutos; 
END $$;



-- PROCEDURE QUE POVOA LIGACOES EM UM MES E ANO ESPECIFICOS
CREATE OR REPLACE PROCEDURE povoar_ligacoes(ano INT, mes INT)
LANGUAGE plpgsql
AS $$
DECLARE
	data_ini DATE = ano ||'-' || mes || '-01';
	data_fim DATE;
	data_lig DATE;
	count_dias INT;
	chip RECORD;
	num_liga INT = 0;	
	num_liga_out INT = 0;
	num_liga_in INT = 0;
BEGIN
	data_fim := ultimo_dia(data_ini);
	
	-- selecao de todos os chips pertinentes a clientes ativos em loop
	FOR chip IN SELECT cc.idnumero, cc.idcliente 
	FROM cliente_chip cc 
	INNER JOIN cliente cl ON cl.idcliente = cc.idcliente 
	WHERE cl.cancelado = 'N'
	LOOP
		count_dias = CAST((EXTRACT (DAY FROM data_fim)) AS INT);
		FOR i IN 1..count_dias
		LOOP
			-- definicao da data da ligacao
			data_lig = ano ||'-' || mes || i;
			
			-- definicao do numero de ligacoes para cada operadora 
			num_liga = FLOOR(random()*(10-1+1))+1;
			num_liga_out = ROUND((num_liga * 3)/10); -- 30% para fora
			num_liga_in = ROUND((num_liga * 7)/10);  -- 70% para entre operadoras
			IF num_liga_in = 0 THEN
				num_liga_in = 1;
			END IF;
			IF num_liga_out = 0 THEN
				num_liga_out = 1;
			END IF;
						
			--FOR i IN 1..num_liga_out
				-- gerar_ligacao(chip.idnumero, data_lig, 'op_igual');
			--END LOOP;
			
			--FOR i IN 1..num_liga_in
				-- gerar_ligacao(chip.idnumero, data_lig, 'op_diferente');
			--END LOOP;
			
		END LOOP;		
	END LOOP;
END $$;



--REQUISITO 8

CREATE OR REPLACE FUNCTION FN_CANCELA_INATIVA_DEVEDOR()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
DECLARE
	INFO_TUDO RECORD;
BEGIN
	--BUSCA AS INFORMAÇÕES DO CLIENTE,CHIP
	SELECT CLIENTE.IDCLIENTE, CHIP.IDNUMERO,FATURA.PAGO INTO INFO_TUDO
	FROM CLIENTE JOIN CLIENTE_CHIP
	ON CLIENTE.IDNUMERO = CLIENTE_CHIP.IDNUMERO
	JOIN CHIP
	ON CLIENTE_CHIP.IDNUMERO = CHIP.IDNUMERO
	JOIN FATURA
	ON FATURA.IDNUMERO = CHIP.IDNUMERO
	WHERE CLIENTE.IDCLIENTE = OLD.IDCLIENTE;
	
	IF INFO_TUDO.PAGO = 'N' THEN
		UPDATE CHIP SET ATIVO = 'N'
		WHERE CHIP.IDNUMERO = INFO_TUDO.IDNUMERO;
		
		UPDATE CLIENTE SET CANCELADO = 'S'
		WHERE CLIENTE.IDCLIENTE = INFO_TUDO.IDCLIENTE;
		
		RETURN NULL;
	
	ELSE
		RAISE EXCEPTION 'O CLIENTE NÃO APRESENTA FATURAS EM ABERTO';
	END IF;
END $$;

CREATE TRIGGER TG_CANCELA_INATIVA_DEVEDOR
AFTER UPDATE OF PAGO ON FATURA
FOR EACH ROW
EXECUTE PROCEDURE FN_CANCELA_INATIVA_DEVEDOR()